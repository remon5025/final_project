import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import scienceplots
plt.style.use(['science', 'notebook'])
from time import process_time

# Reading Data

path = "/uufs/chpc.utah.edu/common/home/astro/zheng/zhengz/BGS_Mock/CCMD_Mocks/CCMD_Mock01_GalInfo.dat"
data = np.loadtxt(path)
print(data)

# filtering data in the range

filtered_data = data[np.where(
    (data[:, 8] >= 0.45) & (data[:, 8] <= 0.55) &
    (data[:, 7] >= -20.60) & (data[:, 7] <= -20.40)
)[0]
                    ]
print(filtered_data)

print(  "Maximum value of x:", np.max(filtered_data[:, 1])   )
print(  "Maximum value of y:", np.max(filtered_data[:, 2])   )
print(  "Maximum value of z:", np.max(filtered_data[:, 3])   )

print("Number of filtered data points:", filtered_data.shape[0])

# Ploting data points

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(filtered_data[:, 1], filtered_data[:, 2], filtered_data[:, 3], c='r', marker='o')
ax.set_xlabel('x ($h^{-1}$ Mpc)')
ax.set_ylabel('y ($h^{-1}$ Mpc)')
ax.set_zlabel('z ($h^{-1}$ Mpc)')

plt.savefig('datapoints_3d.jpg', dpi=300)

plt.show()

plt.scatter(filtered_data[:, 1], filtered_data[:, 2], c='r', marker='o')
plt.xlabel('x ($h^{-1}$ Mpc)')
plt.ylabel('y ($h^{-1}$ Mpc)')
plt.xlim((0,1))
plt.ylim((0,1))
plt.savefig('datapoints_2d_0_1.jpg', dpi=300)

plt.show()

plt.scatter(filtered_data[:, 1], filtered_data[:, 2], c='r', marker='o')
plt.xlabel('x ($h^{-1}$ Mpc)')
plt.ylabel('y ($h^{-1}$ Mpc)')
plt.xlim((0,50))
plt.ylim((0,50))
plt.savefig('datapoints_2d_0_50.jpg', dpi=300)
plt.show()

# With fixed R

data_points = filtered_data[:, 1:4]

# generate random sphere center
def generate_sphere_center():
    return np.random.rand(1, 3) * 1000

# check if a point is inside the sphere
def is_inside_sphere(point, center, radius):
    distance = np.linalg.norm(point - center)
    return distance < radius

# define parameters
num_trials = 100
radii = [20,30,40,50,60]
num_plots = len(radii)

# create subplots
fig, axs = plt.subplots(1, num_plots, figsize=(15, 4))

# perform trials for each radius
for i, radius in enumerate(radii):
    counts = []
    for _ in range(num_trials):
        sphere_center = generate_sphere_center()
        num_data_in_sphere = np.sum([is_inside_sphere(point, sphere_center, radius) for point in data_points])
        counts.append(num_data_in_sphere)
    
    # plot histogram for current radius
    axs[i].hist(counts, bins = np.arange(max(counts) + 2), color = 'r', histtype = 'step')
    axs[i].set_title(f'$R =$ {radius}' ' $h^{-1}$ Mpc')
    axs[i].set_xlabel('Galaxies')
    axs[i].set_ylabel('$f_{v}(N)*100$')

plt.tight_layout()
plt.savefig('f_v(N).jpg', dpi=300)

plt.show()

# R is changing

# define parameters
num_trials = 100
radii = np.linspace(0, 60, 120)  # 120 radii between 0 and 60
probabilities_0, probabilities_2, probabilities_4, probabilities_6, probabilities_8, probabilities_10, probabilities_20, probabilities_50 = [ [] for _ in range(8)]

# perform trials for each radius
for radius in radii:
    count_0, count_2, count_4, count_6, count_8, count_10, count_20, count_50 = [0 for _ in range(8)]
    for _ in range(num_trials):
        sphere_center = generate_sphere_center()
        num_data_in_sphere = np.sum([is_inside_sphere(point, sphere_center, radius) for point in data_points])
        if num_data_in_sphere == 0:
            count_0 += 1
        if num_data_in_sphere == 2:
            count_2 += 1
        if num_data_in_sphere == 4:
            count_4 += 1
        if num_data_in_sphere == 6:
            count_6 += 1
        if num_data_in_sphere == 8:
            count_8 += 1
        if num_data_in_sphere == 10:
            count_10 += 1
        if num_data_in_sphere == 20:
            count_20 += 1
        if num_data_in_sphere == 50:
            count_50 += 1
    probabilities_0.append(count_0 / num_trials)
    probabilities_2.append(count_2 / num_trials)
    probabilities_4.append(count_4 / num_trials)
    probabilities_6.append(count_6 / num_trials)
    probabilities_8.append(count_8 / num_trials)
    probabilities_10.append(count_10 / num_trials)
    probabilities_20.append(count_20 / num_trials)
    probabilities_50.append(count_50 / num_trials)

# for P(0)

plt.plot(radii, probabilities_0, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(0)$')
#plt.ylabel('$log[P(0)]$')
#plt.yscale('log')
plt.savefig('p(0).jpg', dpi=300)
#plt.savefig('p(0)_2.jpg', dpi=300)
plt.show()

# for P(2)

plt.plot(radii, probabilities_2, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(2)$')
#plt.ylabel('$log[P(2)]$')
#plt.yscale('log')
plt.savefig('p(2).jpg', dpi=300)
#plt.savefig('p(2)_2.jpg', dpi=300)
plt.show()

# for P(4)

plt.plot(radii, probabilities_4, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(4)$')
#plt.ylabel('$log[P(4)]$')
#plt.yscale('log')
plt.savefig('p(4).jpg', dpi=300)
#plt.savefig('p(4)_2.jpg', dpi=300)
plt.show()

# for P(6)

plt.plot(radii, probabilities_6, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(6)$')
#plt.ylabel('$log[P(6)]$')
#plt.yscale('log')
plt.savefig('p(6).jpg', dpi=300)
#plt.savefig('p(6)_2.jpg', dpi=300)
plt.show()

# for P(8)

plt.plot(radii, probabilities_8, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(8)$')
#plt.ylabel('$log[P(8)]$')
#plt.yscale('log')
plt.savefig('p(8).jpg', dpi=300)
#plt.savefig('p(8)_2.jpg', dpi=300)
plt.show()

# for P(10)

plt.plot(radii, probabilities_10, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(10)$')
#plt.ylabel('$log[P(10)]$')
#plt.yscale('log')
plt.savefig('p(10).jpg', dpi=300)
#plt.savefig('p(10)_2.jpg', dpi=300)
plt.show()

# for P(20)

plt.plot(radii, probabilities_20, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(20)$')
#plt.ylabel('$log[P(20)]$')
#plt.yscale('log')
plt.savefig('p(20).jpg', dpi=300)
#plt.savefig('p(20)_2.jpg', dpi=300)
plt.show()

# for P(50)

plt.plot(radii, probabilities_50, color = 'r', marker='o', linestyle='None')
plt.xlabel('$R (h^{-1}$ Mpc')
plt.ylabel('$P(50)$')
#plt.ylabel('$log[P(50)]$')
#plt.yscale('log')
plt.savefig('p(50).jpg', dpi=300)
#plt.savefig('p(50)_2.jpg', dpi=300)
plt.show()
